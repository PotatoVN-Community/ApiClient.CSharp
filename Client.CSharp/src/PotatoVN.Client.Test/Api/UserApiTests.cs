/*
 * PotatoVN.Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using Xunit;

using PotatoVN.Client.Client;
using PotatoVN.Client.Api;
// uncomment below to import models
//using PotatoVN.Client.Model;

namespace PotatoVN.Client.Test.Api
{
    /// <summary>
    ///  Class for testing UserApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class UserApiTests : IDisposable
    {
        private UserApi instance;

        public UserApiTests()
        {
            instance = new UserApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of UserApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' UserApi
            //Assert.IsType<UserApi>(instance);
        }

        /// <summary>
        /// Test UserGet
        /// </summary>
        [Fact]
        public void UserGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? pageIndex = null;
            //int? pageSize = null;
            //var response = instance.UserGet(pageIndex, pageSize);
            //Assert.IsType<UserDtoPagedResult>(response);
        }

        /// <summary>
        /// Test UserIdGet
        /// </summary>
        [Fact]
        public void UserIdGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int id = null;
            //var response = instance.UserIdGet(id);
            //Assert.IsType<UserDto>(response);
        }

        /// <summary>
        /// Test UserMeGet
        /// </summary>
        [Fact]
        public void UserMeGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //bool? withAvatar = null;
            //var response = instance.UserMeGet(withAvatar);
            //Assert.IsType<UserDto>(response);
        }

        /// <summary>
        /// Test UserMePatch
        /// </summary>
        [Fact]
        public void UserMePatchTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserModifyDto? userModifyDto = null;
            //var response = instance.UserMePatch(userModifyDto);
            //Assert.IsType<UserDto>(response);
        }

        /// <summary>
        /// Test UserPost
        /// </summary>
        [Fact]
        public void UserPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserRegisterDto? userRegisterDto = null;
            //var response = instance.UserPost(userRegisterDto);
            //Assert.IsType<UserWithTokenDto>(response);
        }

        /// <summary>
        /// Test UserSessionBgmPost
        /// </summary>
        [Fact]
        public void UserSessionBgmPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserLoginViaBgmDto? userLoginViaBgmDto = null;
            //var response = instance.UserSessionBgmPost(userLoginViaBgmDto);
            //Assert.IsType<UserWithTokenDto>(response);
        }

        /// <summary>
        /// Test UserSessionPost
        /// </summary>
        [Fact]
        public void UserSessionPostTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //UserLoginDto? userLoginDto = null;
            //var response = instance.UserSessionPost(userLoginDto);
            //Assert.IsType<UserWithTokenDto>(response);
        }

        /// <summary>
        /// Test UserSessionRefreshGet
        /// </summary>
        [Fact]
        public void UserSessionRefreshGetTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //var response = instance.UserSessionRefreshGet();
            //Assert.IsType<UserWithTokenDto>(response);
        }
    }
}
