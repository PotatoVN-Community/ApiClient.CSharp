/*
 * PotatoVN.Server
 *
 * PotatoVN 同步服务器 最新更新：galgame新增playcount字段
 *
 * The version of the OpenAPI document: v1.9+e6eef47b6566802324035dddd46b62dd41d90b75
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using PotatoVN.Client.Client;
using PotatoVN.Client.Model;

namespace PotatoVN.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStaffApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 获取staff列表
        /// </summary>
        /// <remarks>
        /// 获取最后一次更新时间严格晚于给定时间戳的staff列表&lt;br /&gt;  若includeDeleted&#x3D;true，被删除的staff也会返回，删除的staff的IsDeleted字段为true
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestamp"></param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="includeDeleted"> (optional, default to true)</param>
        /// <returns>StaffDtoPagedResult</returns>
        StaffDtoPagedResult StaffGet(long timestamp, int? pageIndex = default, int? pageSize = default, bool? includeDeleted = default);

        /// <summary>
        /// 获取staff列表
        /// </summary>
        /// <remarks>
        /// 获取最后一次更新时间严格晚于给定时间戳的staff列表&lt;br /&gt;  若includeDeleted&#x3D;true，被删除的staff也会返回，删除的staff的IsDeleted字段为true
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestamp"></param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="includeDeleted"> (optional, default to true)</param>
        /// <returns>ApiResponse of StaffDtoPagedResult</returns>
        ApiResponse<StaffDtoPagedResult> StaffGetWithHttpInfo(long timestamp, int? pageIndex = default, int? pageSize = default, bool? includeDeleted = default);
        /// <summary>
        /// 新建或更新staff
        /// </summary>
        /// <remarks>
        /// 所有字段均可选，覆盖原字段 &lt;br /&gt;&lt;b&gt;若Id没有填或为0，则认为是新建staff&lt;/b&gt;&lt;br /&gt;  其中IsDelete表示是否要删除这个staff&lt;br /&gt;
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffUpdateDto"> (optional)</param>
        /// <returns>StaffDto</returns>
        StaffDto StaffPatch(StaffUpdateDto? staffUpdateDto = default);

        /// <summary>
        /// 新建或更新staff
        /// </summary>
        /// <remarks>
        /// 所有字段均可选，覆盖原字段 &lt;br /&gt;&lt;b&gt;若Id没有填或为0，则认为是新建staff&lt;/b&gt;&lt;br /&gt;  其中IsDelete表示是否要删除这个staff&lt;br /&gt;
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffUpdateDto"> (optional)</param>
        /// <returns>ApiResponse of StaffDto</returns>
        ApiResponse<StaffDto> StaffPatchWithHttpInfo(StaffUpdateDto? staffUpdateDto = default);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStaffApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 获取staff列表
        /// </summary>
        /// <remarks>
        /// 获取最后一次更新时间严格晚于给定时间戳的staff列表&lt;br /&gt;  若includeDeleted&#x3D;true，被删除的staff也会返回，删除的staff的IsDeleted字段为true
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestamp"></param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="includeDeleted"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StaffDtoPagedResult</returns>
        System.Threading.Tasks.Task<StaffDtoPagedResult> StaffGetAsync(long timestamp, int? pageIndex = default, int? pageSize = default, bool? includeDeleted = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取staff列表
        /// </summary>
        /// <remarks>
        /// 获取最后一次更新时间严格晚于给定时间戳的staff列表&lt;br /&gt;  若includeDeleted&#x3D;true，被删除的staff也会返回，删除的staff的IsDeleted字段为true
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestamp"></param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="includeDeleted"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StaffDtoPagedResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<StaffDtoPagedResult>> StaffGetWithHttpInfoAsync(long timestamp, int? pageIndex = default, int? pageSize = default, bool? includeDeleted = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 新建或更新staff
        /// </summary>
        /// <remarks>
        /// 所有字段均可选，覆盖原字段 &lt;br /&gt;&lt;b&gt;若Id没有填或为0，则认为是新建staff&lt;/b&gt;&lt;br /&gt;  其中IsDelete表示是否要删除这个staff&lt;br /&gt;
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffUpdateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StaffDto</returns>
        System.Threading.Tasks.Task<StaffDto> StaffPatchAsync(StaffUpdateDto? staffUpdateDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 新建或更新staff
        /// </summary>
        /// <remarks>
        /// 所有字段均可选，覆盖原字段 &lt;br /&gt;&lt;b&gt;若Id没有填或为0，则认为是新建staff&lt;/b&gt;&lt;br /&gt;  其中IsDelete表示是否要删除这个staff&lt;br /&gt;
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffUpdateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StaffDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<StaffDto>> StaffPatchWithHttpInfoAsync(StaffUpdateDto? staffUpdateDto = default, System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IStaffApi : IStaffApiSync, IStaffApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class StaffApi : IDisposable, IStaffApi
    {
        private PotatoVN.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="StaffApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public StaffApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StaffApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public StaffApi(string basePath)
        {
            this.Configuration = PotatoVN.Client.Client.Configuration.MergeConfigurations(
                PotatoVN.Client.Client.GlobalConfiguration.Instance,
                new PotatoVN.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PotatoVN.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PotatoVN.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StaffApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public StaffApi(PotatoVN.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PotatoVN.Client.Client.Configuration.MergeConfigurations(
                PotatoVN.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PotatoVN.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PotatoVN.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StaffApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public StaffApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StaffApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public StaffApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PotatoVN.Client.Client.Configuration.MergeConfigurations(
                PotatoVN.Client.Client.GlobalConfiguration.Instance,
                new PotatoVN.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PotatoVN.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PotatoVN.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StaffApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public StaffApi(HttpClient client, PotatoVN.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PotatoVN.Client.Client.Configuration.MergeConfigurations(
                PotatoVN.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PotatoVN.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PotatoVN.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="StaffApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public StaffApi(PotatoVN.Client.Client.ISynchronousClient client, PotatoVN.Client.Client.IAsynchronousClient asyncClient, PotatoVN.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PotatoVN.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public PotatoVN.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PotatoVN.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PotatoVN.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PotatoVN.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PotatoVN.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 获取staff列表 获取最后一次更新时间严格晚于给定时间戳的staff列表&lt;br /&gt;  若includeDeleted&#x3D;true，被删除的staff也会返回，删除的staff的IsDeleted字段为true
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestamp"></param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="includeDeleted"> (optional, default to true)</param>
        /// <returns>StaffDtoPagedResult</returns>
        public StaffDtoPagedResult StaffGet(long timestamp, int? pageIndex = default, int? pageSize = default, bool? includeDeleted = default)
        {
            PotatoVN.Client.Client.ApiResponse<StaffDtoPagedResult> localVarResponse = StaffGetWithHttpInfo(timestamp, pageIndex, pageSize, includeDeleted);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 获取staff列表 获取最后一次更新时间严格晚于给定时间戳的staff列表&lt;br /&gt;  若includeDeleted&#x3D;true，被删除的staff也会返回，删除的staff的IsDeleted字段为true
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestamp"></param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="includeDeleted"> (optional, default to true)</param>
        /// <returns>ApiResponse of StaffDtoPagedResult</returns>
        public PotatoVN.Client.Client.ApiResponse<StaffDtoPagedResult> StaffGetWithHttpInfo(long timestamp, int? pageIndex = default, int? pageSize = default, bool? includeDeleted = default)
        {
            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "timestamp", timestamp));
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (includeDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "includeDeleted", includeDeleted));
            }

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<StaffDtoPagedResult>("/staff", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StaffGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取staff列表 获取最后一次更新时间严格晚于给定时间戳的staff列表&lt;br /&gt;  若includeDeleted&#x3D;true，被删除的staff也会返回，删除的staff的IsDeleted字段为true
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestamp"></param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="includeDeleted"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StaffDtoPagedResult</returns>
        public async System.Threading.Tasks.Task<StaffDtoPagedResult> StaffGetAsync(long timestamp, int? pageIndex = default, int? pageSize = default, bool? includeDeleted = default, System.Threading.CancellationToken cancellationToken = default)
        {
            PotatoVN.Client.Client.ApiResponse<StaffDtoPagedResult> localVarResponse = await StaffGetWithHttpInfoAsync(timestamp, pageIndex, pageSize, includeDeleted, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 获取staff列表 获取最后一次更新时间严格晚于给定时间戳的staff列表&lt;br /&gt;  若includeDeleted&#x3D;true，被删除的staff也会返回，删除的staff的IsDeleted字段为true
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="timestamp"></param>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="pageSize"> (optional, default to 10)</param>
        /// <param name="includeDeleted"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StaffDtoPagedResult)</returns>
        public async System.Threading.Tasks.Task<PotatoVN.Client.Client.ApiResponse<StaffDtoPagedResult>> StaffGetWithHttpInfoAsync(long timestamp, int? pageIndex = default, int? pageSize = default, bool? includeDeleted = default, System.Threading.CancellationToken cancellationToken = default)
        {

            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "timestamp", timestamp));
            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }
            if (includeDeleted != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "includeDeleted", includeDeleted));
            }

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<StaffDtoPagedResult>("/staff", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StaffGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 新建或更新staff 所有字段均可选，覆盖原字段 &lt;br /&gt;&lt;b&gt;若Id没有填或为0，则认为是新建staff&lt;/b&gt;&lt;br /&gt;  其中IsDelete表示是否要删除这个staff&lt;br /&gt;
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffUpdateDto"> (optional)</param>
        /// <returns>StaffDto</returns>
        public StaffDto StaffPatch(StaffUpdateDto? staffUpdateDto = default)
        {
            PotatoVN.Client.Client.ApiResponse<StaffDto> localVarResponse = StaffPatchWithHttpInfo(staffUpdateDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 新建或更新staff 所有字段均可选，覆盖原字段 &lt;br /&gt;&lt;b&gt;若Id没有填或为0，则认为是新建staff&lt;/b&gt;&lt;br /&gt;  其中IsDelete表示是否要删除这个staff&lt;br /&gt;
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffUpdateDto"> (optional)</param>
        /// <returns>ApiResponse of StaffDto</returns>
        public PotatoVN.Client.Client.ApiResponse<StaffDto> StaffPatchWithHttpInfo(StaffUpdateDto? staffUpdateDto = default)
        {
            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = staffUpdateDto;

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<StaffDto>("/staff", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StaffPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 新建或更新staff 所有字段均可选，覆盖原字段 &lt;br /&gt;&lt;b&gt;若Id没有填或为0，则认为是新建staff&lt;/b&gt;&lt;br /&gt;  其中IsDelete表示是否要删除这个staff&lt;br /&gt;
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffUpdateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of StaffDto</returns>
        public async System.Threading.Tasks.Task<StaffDto> StaffPatchAsync(StaffUpdateDto? staffUpdateDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            PotatoVN.Client.Client.ApiResponse<StaffDto> localVarResponse = await StaffPatchWithHttpInfoAsync(staffUpdateDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 新建或更新staff 所有字段均可选，覆盖原字段 &lt;br /&gt;&lt;b&gt;若Id没有填或为0，则认为是新建staff&lt;/b&gt;&lt;br /&gt;  其中IsDelete表示是否要删除这个staff&lt;br /&gt;
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="staffUpdateDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (StaffDto)</returns>
        public async System.Threading.Tasks.Task<PotatoVN.Client.Client.ApiResponse<StaffDto>> StaffPatchWithHttpInfoAsync(StaffUpdateDto? staffUpdateDto = default, System.Threading.CancellationToken cancellationToken = default)
        {

            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = staffUpdateDto;

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<StaffDto>("/staff", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("StaffPatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
