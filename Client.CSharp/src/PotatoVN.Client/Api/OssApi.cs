/*
 * PotatoVN.Server
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using PotatoVN.Client.Client;
using PotatoVN.Client.Model;

namespace PotatoVN.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOssApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 获取oss预签名读取路径
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName">上传文件名（包括前缀），如：Galgame/114514.jpg (optional, default to &quot;&quot;)</param>
        /// <returns>string</returns>
        string OssGetGet(string? objectFullName = default(string?));

        /// <summary>
        /// 获取oss预签名读取路径
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName">上传文件名（包括前缀），如：Galgame/114514.jpg (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> OssGetGetWithHttpInfo(string? objectFullName = default(string?));
        /// <summary>
        /// 获取oss预签名上传路径， 获取链接后会预先占用请求的空间， 直到客户端使用UpdateSpace通知服务器更新空间
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName">上传文件名（包括前缀），如：Galgame/114514.jpg (optional, default to &quot;&quot;)</param>
        /// <param name="requireSpace">要上传的文件大小（byte），默认为10MB (optional, default to 10485760)</param>
        /// <returns>string</returns>
        string OssPutGet(string? objectFullName = default(string?), long? requireSpace = default(long?));

        /// <summary>
        /// 获取oss预签名上传路径， 获取链接后会预先占用请求的空间， 直到客户端使用UpdateSpace通知服务器更新空间
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName">上传文件名（包括前缀），如：Galgame/114514.jpg (optional, default to &quot;&quot;)</param>
        /// <param name="requireSpace">要上传的文件大小（byte），默认为10MB (optional, default to 10485760)</param>
        /// <returns>ApiResponse of string</returns>
        ApiResponse<string> OssPutGetWithHttpInfo(string? objectFullName = default(string?), long? requireSpace = default(long?));
        /// <summary>
        /// 更新某个key下文件占用空间，一般用于上传完成后通知服务器计算具体空间
        /// </summary>
        /// <remarks>
        /// 更新某个key下文件所占用的空间&lt;br /&gt;&lt;b&gt;即使是上传失败/取消，也需要调用此接口以释放预占用的空间&lt;/b&gt;
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName"> (optional, default to &quot;&quot;)</param>
        /// <returns>UserDto</returns>
        UserDto OssUpdatePut(string? objectFullName = default(string?));

        /// <summary>
        /// 更新某个key下文件占用空间，一般用于上传完成后通知服务器计算具体空间
        /// </summary>
        /// <remarks>
        /// 更新某个key下文件所占用的空间&lt;br /&gt;&lt;b&gt;即使是上传失败/取消，也需要调用此接口以释放预占用的空间&lt;/b&gt;
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of UserDto</returns>
        ApiResponse<UserDto> OssUpdatePutWithHttpInfo(string? objectFullName = default(string?));
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOssApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 获取oss预签名读取路径
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName">上传文件名（包括前缀），如：Galgame/114514.jpg (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> OssGetGetAsync(string? objectFullName = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 获取oss预签名读取路径
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName">上传文件名（包括前缀），如：Galgame/114514.jpg (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> OssGetGetWithHttpInfoAsync(string? objectFullName = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 获取oss预签名上传路径， 获取链接后会预先占用请求的空间， 直到客户端使用UpdateSpace通知服务器更新空间
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName">上传文件名（包括前缀），如：Galgame/114514.jpg (optional, default to &quot;&quot;)</param>
        /// <param name="requireSpace">要上传的文件大小（byte），默认为10MB (optional, default to 10485760)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        System.Threading.Tasks.Task<string> OssPutGetAsync(string? objectFullName = default(string?), long? requireSpace = default(long?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 获取oss预签名上传路径， 获取链接后会预先占用请求的空间， 直到客户端使用UpdateSpace通知服务器更新空间
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName">上传文件名（包括前缀），如：Galgame/114514.jpg (optional, default to &quot;&quot;)</param>
        /// <param name="requireSpace">要上传的文件大小（byte），默认为10MB (optional, default to 10485760)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        System.Threading.Tasks.Task<ApiResponse<string>> OssPutGetWithHttpInfoAsync(string? objectFullName = default(string?), long? requireSpace = default(long?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        /// <summary>
        /// 更新某个key下文件占用空间，一般用于上传完成后通知服务器计算具体空间
        /// </summary>
        /// <remarks>
        /// 更新某个key下文件所占用的空间&lt;br /&gt;&lt;b&gt;即使是上传失败/取消，也需要调用此接口以释放预占用的空间&lt;/b&gt;
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDto</returns>
        System.Threading.Tasks.Task<UserDto> OssUpdatePutAsync(string? objectFullName = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));

        /// <summary>
        /// 更新某个key下文件占用空间，一般用于上传完成后通知服务器计算具体空间
        /// </summary>
        /// <remarks>
        /// 更新某个key下文件所占用的空间&lt;br /&gt;&lt;b&gt;即使是上传失败/取消，也需要调用此接口以释放预占用的空间&lt;/b&gt;
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDto>> OssUpdatePutWithHttpInfoAsync(string? objectFullName = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOssApi : IOssApiSync, IOssApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OssApi : IDisposable, IOssApi
    {
        private PotatoVN.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OssApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public OssApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OssApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public OssApi(string basePath)
        {
            this.Configuration = PotatoVN.Client.Client.Configuration.MergeConfigurations(
                PotatoVN.Client.Client.GlobalConfiguration.Instance,
                new PotatoVN.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PotatoVN.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PotatoVN.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OssApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public OssApi(PotatoVN.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PotatoVN.Client.Client.Configuration.MergeConfigurations(
                PotatoVN.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PotatoVN.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PotatoVN.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OssApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OssApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OssApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OssApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PotatoVN.Client.Client.Configuration.MergeConfigurations(
                PotatoVN.Client.Client.GlobalConfiguration.Instance,
                new PotatoVN.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PotatoVN.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PotatoVN.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OssApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public OssApi(HttpClient client, PotatoVN.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PotatoVN.Client.Client.Configuration.MergeConfigurations(
                PotatoVN.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PotatoVN.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PotatoVN.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OssApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public OssApi(PotatoVN.Client.Client.ISynchronousClient client, PotatoVN.Client.Client.IAsynchronousClient asyncClient, PotatoVN.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PotatoVN.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public PotatoVN.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PotatoVN.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PotatoVN.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PotatoVN.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PotatoVN.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 获取oss预签名读取路径 
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName">上传文件名（包括前缀），如：Galgame/114514.jpg (optional, default to &quot;&quot;)</param>
        /// <returns>string</returns>
        public string OssGetGet(string? objectFullName = default(string?))
        {
            PotatoVN.Client.Client.ApiResponse<string> localVarResponse = OssGetGetWithHttpInfo(objectFullName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 获取oss预签名读取路径 
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName">上传文件名（包括前缀），如：Galgame/114514.jpg (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of string</returns>
        public PotatoVN.Client.Client.ApiResponse<string> OssGetGetWithHttpInfo(string? objectFullName = default(string?))
        {
            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (objectFullName != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "objectFullName", objectFullName));
            }

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/oss/get", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OssGetGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取oss预签名读取路径 
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName">上传文件名（包括前缀），如：Galgame/114514.jpg (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> OssGetGetAsync(string? objectFullName = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PotatoVN.Client.Client.ApiResponse<string> localVarResponse = await OssGetGetWithHttpInfoAsync(objectFullName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 获取oss预签名读取路径 
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName">上传文件名（包括前缀），如：Galgame/114514.jpg (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<PotatoVN.Client.Client.ApiResponse<string>> OssGetGetWithHttpInfoAsync(string? objectFullName = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (objectFullName != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "objectFullName", objectFullName));
            }

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/oss/get", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OssGetGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取oss预签名上传路径， 获取链接后会预先占用请求的空间， 直到客户端使用UpdateSpace通知服务器更新空间 
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName">上传文件名（包括前缀），如：Galgame/114514.jpg (optional, default to &quot;&quot;)</param>
        /// <param name="requireSpace">要上传的文件大小（byte），默认为10MB (optional, default to 10485760)</param>
        /// <returns>string</returns>
        public string OssPutGet(string? objectFullName = default(string?), long? requireSpace = default(long?))
        {
            PotatoVN.Client.Client.ApiResponse<string> localVarResponse = OssPutGetWithHttpInfo(objectFullName, requireSpace);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 获取oss预签名上传路径， 获取链接后会预先占用请求的空间， 直到客户端使用UpdateSpace通知服务器更新空间 
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName">上传文件名（包括前缀），如：Galgame/114514.jpg (optional, default to &quot;&quot;)</param>
        /// <param name="requireSpace">要上传的文件大小（byte），默认为10MB (optional, default to 10485760)</param>
        /// <returns>ApiResponse of string</returns>
        public PotatoVN.Client.Client.ApiResponse<string> OssPutGetWithHttpInfo(string? objectFullName = default(string?), long? requireSpace = default(long?))
        {
            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (objectFullName != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "objectFullName", objectFullName));
            }
            if (requireSpace != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "requireSpace", requireSpace));
            }

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<string>("/oss/put", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OssPutGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取oss预签名上传路径， 获取链接后会预先占用请求的空间， 直到客户端使用UpdateSpace通知服务器更新空间 
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName">上传文件名（包括前缀），如：Galgame/114514.jpg (optional, default to &quot;&quot;)</param>
        /// <param name="requireSpace">要上传的文件大小（byte），默认为10MB (optional, default to 10485760)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of string</returns>
        public async System.Threading.Tasks.Task<string> OssPutGetAsync(string? objectFullName = default(string?), long? requireSpace = default(long?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PotatoVN.Client.Client.ApiResponse<string> localVarResponse = await OssPutGetWithHttpInfoAsync(objectFullName, requireSpace, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 获取oss预签名上传路径， 获取链接后会预先占用请求的空间， 直到客户端使用UpdateSpace通知服务器更新空间 
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName">上传文件名（包括前缀），如：Galgame/114514.jpg (optional, default to &quot;&quot;)</param>
        /// <param name="requireSpace">要上传的文件大小（byte），默认为10MB (optional, default to 10485760)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (string)</returns>
        public async System.Threading.Tasks.Task<PotatoVN.Client.Client.ApiResponse<string>> OssPutGetWithHttpInfoAsync(string? objectFullName = default(string?), long? requireSpace = default(long?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (objectFullName != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "objectFullName", objectFullName));
            }
            if (requireSpace != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "requireSpace", requireSpace));
            }

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<string>("/oss/put", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OssPutGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 更新某个key下文件占用空间，一般用于上传完成后通知服务器计算具体空间 更新某个key下文件所占用的空间&lt;br /&gt;&lt;b&gt;即使是上传失败/取消，也需要调用此接口以释放预占用的空间&lt;/b&gt;
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName"> (optional, default to &quot;&quot;)</param>
        /// <returns>UserDto</returns>
        public UserDto OssUpdatePut(string? objectFullName = default(string?))
        {
            PotatoVN.Client.Client.ApiResponse<UserDto> localVarResponse = OssUpdatePutWithHttpInfo(objectFullName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 更新某个key下文件占用空间，一般用于上传完成后通知服务器计算具体空间 更新某个key下文件所占用的空间&lt;br /&gt;&lt;b&gt;即使是上传失败/取消，也需要调用此接口以释放预占用的空间&lt;/b&gt;
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName"> (optional, default to &quot;&quot;)</param>
        /// <returns>ApiResponse of UserDto</returns>
        public PotatoVN.Client.Client.ApiResponse<UserDto> OssUpdatePutWithHttpInfo(string? objectFullName = default(string?))
        {
            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (objectFullName != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "objectFullName", objectFullName));
            }

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<UserDto>("/oss/update", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OssUpdatePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 更新某个key下文件占用空间，一般用于上传完成后通知服务器计算具体空间 更新某个key下文件所占用的空间&lt;br /&gt;&lt;b&gt;即使是上传失败/取消，也需要调用此接口以释放预占用的空间&lt;/b&gt;
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDto</returns>
        public async System.Threading.Tasks.Task<UserDto> OssUpdatePutAsync(string? objectFullName = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {
            PotatoVN.Client.Client.ApiResponse<UserDto> localVarResponse = await OssUpdatePutWithHttpInfoAsync(objectFullName, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 更新某个key下文件占用空间，一般用于上传完成后通知服务器计算具体空间 更新某个key下文件所占用的空间&lt;br /&gt;&lt;b&gt;即使是上传失败/取消，也需要调用此接口以释放预占用的空间&lt;/b&gt;
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="objectFullName"> (optional, default to &quot;&quot;)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        public async System.Threading.Tasks.Task<PotatoVN.Client.Client.ApiResponse<UserDto>> OssUpdatePutWithHttpInfoAsync(string? objectFullName = default(string?), System.Threading.CancellationToken cancellationToken = default(global::System.Threading.CancellationToken))
        {

            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (objectFullName != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "objectFullName", objectFullName));
            }

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PutAsync<UserDto>("/oss/update", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("OssUpdatePut", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
