/*
 * PotatoVN.Server
 *
 * PotatoVN 同步服务器 最新更新：galgame新增playcount字段
 *
 * The version of the OpenAPI document: v1.9+e6eef47b6566802324035dddd46b62dd41d90b75
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using PotatoVN.Client.Client;
using PotatoVN.Client.Model;

namespace PotatoVN.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 获取用户列表
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;该命令需要管理员权限&lt;/b&gt;  &lt;br /&gt;              pageIndex从0开始&lt;br /&gt;              不返回用户的头像URL
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <returns>UserDtoPagedResult</returns>
        UserDtoPagedResult UserGet(int? pageIndex = default, int? pageSize = default);

        /// <summary>
        /// 获取用户列表
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;该命令需要管理员权限&lt;/b&gt;  &lt;br /&gt;              pageIndex从0开始&lt;br /&gt;              不返回用户的头像URL
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <returns>ApiResponse of UserDtoPagedResult</returns>
        ApiResponse<UserDtoPagedResult> UserGetWithHttpInfo(int? pageIndex = default, int? pageSize = default);
        /// <summary>
        /// 获取指定id的用户
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;该命令需要管理员权限&lt;/b&gt;
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserDto</returns>
        UserDto UserIdGet(int id);

        /// <summary>
        /// 获取指定id的用户
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;该命令需要管理员权限&lt;/b&gt;
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserDto</returns>
        ApiResponse<UserDto> UserIdGetWithHttpInfo(int id);
        /// <summary>
        /// 获取自己的用户信息
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withAvatar"> (optional, default to true)</param>
        /// <returns>UserDto</returns>
        UserDto UserMeGet(bool? withAvatar = default);

        /// <summary>
        /// 获取自己的用户信息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withAvatar"> (optional, default to true)</param>
        /// <returns>ApiResponse of UserDto</returns>
        ApiResponse<UserDto> UserMeGetWithHttpInfo(bool? withAvatar = default);
        /// <summary>
        /// 修改用户信息
        /// </summary>
        /// <remarks>
        /// 所有字段均可选
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userModifyDto"> (optional)</param>
        /// <returns>UserDto</returns>
        UserDto UserMePatch(UserModifyDto? userModifyDto = default);

        /// <summary>
        /// 修改用户信息
        /// </summary>
        /// <remarks>
        /// 所有字段均可选
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userModifyDto"> (optional)</param>
        /// <returns>ApiResponse of UserDto</returns>
        ApiResponse<UserDto> UserMePatchWithHttpInfo(UserModifyDto? userModifyDto = default);
        /// <summary>
        /// 注册账户
        /// </summary>
        /// <remarks>
        /// 若注册成功则返回用户信息与token
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRegisterDto"> (optional)</param>
        /// <returns>UserWithTokenDto</returns>
        UserWithTokenDto UserPost(UserRegisterDto? userRegisterDto = default);

        /// <summary>
        /// 注册账户
        /// </summary>
        /// <remarks>
        /// 若注册成功则返回用户信息与token
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRegisterDto"> (optional)</param>
        /// <returns>ApiResponse of UserWithTokenDto</returns>
        ApiResponse<UserWithTokenDto> UserPostWithHttpInfo(UserRegisterDto? userRegisterDto = default);
        /// <summary>
        /// 使用bgm账户登录/注册
        /// </summary>
        /// <remarks>
        /// 如果该bgm账户没有potatoVN账号，则自动注册一个
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLoginViaBgmDto"> (optional)</param>
        /// <returns>UserWithTokenDto</returns>
        UserWithTokenDto UserSessionBgmPost(UserLoginViaBgmDto? userLoginViaBgmDto = default);

        /// <summary>
        /// 使用bgm账户登录/注册
        /// </summary>
        /// <remarks>
        /// 如果该bgm账户没有potatoVN账号，则自动注册一个
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLoginViaBgmDto"> (optional)</param>
        /// <returns>ApiResponse of UserWithTokenDto</returns>
        ApiResponse<UserWithTokenDto> UserSessionBgmPostWithHttpInfo(UserLoginViaBgmDto? userLoginViaBgmDto = default);
        /// <summary>
        /// 登录账户
        /// </summary>
        /// <remarks>
        /// 若登录成功则返回jwtToken
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLoginDto"> (optional)</param>
        /// <returns>UserWithTokenDto</returns>
        UserWithTokenDto UserSessionPost(UserLoginDto? userLoginDto = default);

        /// <summary>
        /// 登录账户
        /// </summary>
        /// <remarks>
        /// 若登录成功则返回jwtToken
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLoginDto"> (optional)</param>
        /// <returns>ApiResponse of UserWithTokenDto</returns>
        ApiResponse<UserWithTokenDto> UserSessionPostWithHttpInfo(UserLoginDto? userLoginDto = default);
        /// <summary>
        /// 获取一个新jwt token
        /// </summary>
        /// <remarks>
        /// 获取一个当前用户的新token
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserWithTokenDto</returns>
        UserWithTokenDto UserSessionRefreshGet();

        /// <summary>
        /// 获取一个新jwt token
        /// </summary>
        /// <remarks>
        /// 获取一个当前用户的新token
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserWithTokenDto</returns>
        ApiResponse<UserWithTokenDto> UserSessionRefreshGetWithHttpInfo();
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// 获取用户列表
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;该命令需要管理员权限&lt;/b&gt;  &lt;br /&gt;              pageIndex从0开始&lt;br /&gt;              不返回用户的头像URL
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDtoPagedResult</returns>
        System.Threading.Tasks.Task<UserDtoPagedResult> UserGetAsync(int? pageIndex = default, int? pageSize = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取用户列表
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;该命令需要管理员权限&lt;/b&gt;  &lt;br /&gt;              pageIndex从0开始&lt;br /&gt;              不返回用户的头像URL
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDtoPagedResult)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDtoPagedResult>> UserGetWithHttpInfoAsync(int? pageIndex = default, int? pageSize = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 获取指定id的用户
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;该命令需要管理员权限&lt;/b&gt;
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDto</returns>
        System.Threading.Tasks.Task<UserDto> UserIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取指定id的用户
        /// </summary>
        /// <remarks>
        /// &lt;b&gt;该命令需要管理员权限&lt;/b&gt;
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDto>> UserIdGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 获取自己的用户信息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withAvatar"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDto</returns>
        System.Threading.Tasks.Task<UserDto> UserMeGetAsync(bool? withAvatar = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取自己的用户信息
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withAvatar"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDto>> UserMeGetWithHttpInfoAsync(bool? withAvatar = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 修改用户信息
        /// </summary>
        /// <remarks>
        /// 所有字段均可选
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userModifyDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDto</returns>
        System.Threading.Tasks.Task<UserDto> UserMePatchAsync(UserModifyDto? userModifyDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 修改用户信息
        /// </summary>
        /// <remarks>
        /// 所有字段均可选
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userModifyDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserDto>> UserMePatchWithHttpInfoAsync(UserModifyDto? userModifyDto = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 注册账户
        /// </summary>
        /// <remarks>
        /// 若注册成功则返回用户信息与token
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRegisterDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWithTokenDto</returns>
        System.Threading.Tasks.Task<UserWithTokenDto> UserPostAsync(UserRegisterDto? userRegisterDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 注册账户
        /// </summary>
        /// <remarks>
        /// 若注册成功则返回用户信息与token
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRegisterDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWithTokenDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserWithTokenDto>> UserPostWithHttpInfoAsync(UserRegisterDto? userRegisterDto = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 使用bgm账户登录/注册
        /// </summary>
        /// <remarks>
        /// 如果该bgm账户没有potatoVN账号，则自动注册一个
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLoginViaBgmDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWithTokenDto</returns>
        System.Threading.Tasks.Task<UserWithTokenDto> UserSessionBgmPostAsync(UserLoginViaBgmDto? userLoginViaBgmDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 使用bgm账户登录/注册
        /// </summary>
        /// <remarks>
        /// 如果该bgm账户没有potatoVN账号，则自动注册一个
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLoginViaBgmDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWithTokenDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserWithTokenDto>> UserSessionBgmPostWithHttpInfoAsync(UserLoginViaBgmDto? userLoginViaBgmDto = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 登录账户
        /// </summary>
        /// <remarks>
        /// 若登录成功则返回jwtToken
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLoginDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWithTokenDto</returns>
        System.Threading.Tasks.Task<UserWithTokenDto> UserSessionPostAsync(UserLoginDto? userLoginDto = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 登录账户
        /// </summary>
        /// <remarks>
        /// 若登录成功则返回jwtToken
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLoginDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWithTokenDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserWithTokenDto>> UserSessionPostWithHttpInfoAsync(UserLoginDto? userLoginDto = default, System.Threading.CancellationToken cancellationToken = default);
        /// <summary>
        /// 获取一个新jwt token
        /// </summary>
        /// <remarks>
        /// 获取一个当前用户的新token
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWithTokenDto</returns>
        System.Threading.Tasks.Task<UserWithTokenDto> UserSessionRefreshGetAsync(System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// 获取一个新jwt token
        /// </summary>
        /// <remarks>
        /// 获取一个当前用户的新token
        /// </remarks>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWithTokenDto)</returns>
        System.Threading.Tasks.Task<ApiResponse<UserWithTokenDto>> UserSessionRefreshGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IUserApi : IUserApiSync, IUserApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class UserApi : IDisposable, IUserApi
    {
        private PotatoVN.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <returns></returns>
        public UserApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        public UserApi(string basePath)
        {
            this.Configuration = PotatoVN.Client.Client.Configuration.MergeConfigurations(
                PotatoVN.Client.Client.GlobalConfiguration.Instance,
                new PotatoVN.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PotatoVN.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PotatoVN.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class using Configuration object.
        /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
        /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
        /// </summary>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        public UserApi(PotatoVN.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = PotatoVN.Client.Client.Configuration.MergeConfigurations(
                PotatoVN.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PotatoVN.Client.Client.ApiClient(this.Configuration.BasePath);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PotatoVN.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public UserApi(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="basePath">The target service's base path in URL format.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <exception cref="ArgumentException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public UserApi(HttpClient client, string basePath, HttpClientHandler handler = null)
        {
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PotatoVN.Client.Client.Configuration.MergeConfigurations(
                PotatoVN.Client.Client.GlobalConfiguration.Instance,
                new PotatoVN.Client.Client.Configuration { BasePath = basePath }
            );
            this.ApiClient = new PotatoVN.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client =  this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            this.ExceptionFactory = PotatoVN.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class using Configuration object.
        /// </summary>
        /// <param name="client">An instance of HttpClient.</param>
        /// <param name="configuration">An instance of Configuration.</param>
        /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
        /// <exception cref="ArgumentNullException"></exception>
        /// <returns></returns>
        /// <remarks>
        /// Some configuration settings will not be applied without passing an HttpClientHandler.
        /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
        /// </remarks>
        public UserApi(HttpClient client, PotatoVN.Client.Client.Configuration configuration, HttpClientHandler handler = null)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");
            if (client == null) throw new ArgumentNullException("client");

            this.Configuration = PotatoVN.Client.Client.Configuration.MergeConfigurations(
                PotatoVN.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.ApiClient = new PotatoVN.Client.Client.ApiClient(client, this.Configuration.BasePath, handler);
            this.Client = this.ApiClient;
            this.AsynchronousClient = this.ApiClient;
            ExceptionFactory = PotatoVN.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="UserApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        /// <exception cref="ArgumentNullException"></exception>
        public UserApi(PotatoVN.Client.Client.ISynchronousClient client, PotatoVN.Client.Client.IAsynchronousClient asyncClient, PotatoVN.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = PotatoVN.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Disposes resources if they were created by us
        /// </summary>
        public void Dispose()
        {
            this.ApiClient?.Dispose();
        }

        /// <summary>
        /// Holds the ApiClient if created
        /// </summary>
        public PotatoVN.Client.Client.ApiClient ApiClient { get; set; } = null;

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public PotatoVN.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public PotatoVN.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public PotatoVN.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public PotatoVN.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// 获取用户列表 &lt;b&gt;该命令需要管理员权限&lt;/b&gt;  &lt;br /&gt;              pageIndex从0开始&lt;br /&gt;              不返回用户的头像URL
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <returns>UserDtoPagedResult</returns>
        public UserDtoPagedResult UserGet(int? pageIndex = default, int? pageSize = default)
        {
            PotatoVN.Client.Client.ApiResponse<UserDtoPagedResult> localVarResponse = UserGetWithHttpInfo(pageIndex, pageSize);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 获取用户列表 &lt;b&gt;该命令需要管理员权限&lt;/b&gt;  &lt;br /&gt;              pageIndex从0开始&lt;br /&gt;              不返回用户的头像URL
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <returns>ApiResponse of UserDtoPagedResult</returns>
        public PotatoVN.Client.Client.ApiResponse<UserDtoPagedResult> UserGetWithHttpInfo(int? pageIndex = default, int? pageSize = default)
        {
            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserDtoPagedResult>("/user", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取用户列表 &lt;b&gt;该命令需要管理员权限&lt;/b&gt;  &lt;br /&gt;              pageIndex从0开始&lt;br /&gt;              不返回用户的头像URL
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDtoPagedResult</returns>
        public async System.Threading.Tasks.Task<UserDtoPagedResult> UserGetAsync(int? pageIndex = default, int? pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {
            PotatoVN.Client.Client.ApiResponse<UserDtoPagedResult> localVarResponse = await UserGetWithHttpInfoAsync(pageIndex, pageSize, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 获取用户列表 &lt;b&gt;该命令需要管理员权限&lt;/b&gt;  &lt;br /&gt;              pageIndex从0开始&lt;br /&gt;              不返回用户的头像URL
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="pageIndex"> (optional, default to 0)</param>
        /// <param name="pageSize"> (optional, default to 20)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDtoPagedResult)</returns>
        public async System.Threading.Tasks.Task<PotatoVN.Client.Client.ApiResponse<UserDtoPagedResult>> UserGetWithHttpInfoAsync(int? pageIndex = default, int? pageSize = default, System.Threading.CancellationToken cancellationToken = default)
        {

            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (pageIndex != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "pageIndex", pageIndex));
            }
            if (pageSize != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "pageSize", pageSize));
            }

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserDtoPagedResult>("/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取指定id的用户 &lt;b&gt;该命令需要管理员权限&lt;/b&gt;
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>UserDto</returns>
        public UserDto UserIdGet(int id)
        {
            PotatoVN.Client.Client.ApiResponse<UserDto> localVarResponse = UserIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 获取指定id的用户 &lt;b&gt;该命令需要管理员权限&lt;/b&gt;
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <returns>ApiResponse of UserDto</returns>
        public PotatoVN.Client.Client.ApiResponse<UserDto> UserIdGetWithHttpInfo(int id)
        {
            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PotatoVN.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserDto>("/user/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取指定id的用户 &lt;b&gt;该命令需要管理员权限&lt;/b&gt;
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDto</returns>
        public async System.Threading.Tasks.Task<UserDto> UserIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            PotatoVN.Client.Client.ApiResponse<UserDto> localVarResponse = await UserIdGetWithHttpInfoAsync(id, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 获取指定id的用户 &lt;b&gt;该命令需要管理员权限&lt;/b&gt;
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        public async System.Threading.Tasks.Task<PotatoVN.Client.Client.ApiResponse<UserDto>> UserIdGetWithHttpInfoAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {

            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("id", PotatoVN.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserDto>("/user/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserIdGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取自己的用户信息 
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withAvatar"> (optional, default to true)</param>
        /// <returns>UserDto</returns>
        public UserDto UserMeGet(bool? withAvatar = default)
        {
            PotatoVN.Client.Client.ApiResponse<UserDto> localVarResponse = UserMeGetWithHttpInfo(withAvatar);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 获取自己的用户信息 
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withAvatar"> (optional, default to true)</param>
        /// <returns>ApiResponse of UserDto</returns>
        public PotatoVN.Client.Client.ApiResponse<UserDto> UserMeGetWithHttpInfo(bool? withAvatar = default)
        {
            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (withAvatar != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "withAvatar", withAvatar));
            }

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserDto>("/user/me", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserMeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取自己的用户信息 
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withAvatar"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDto</returns>
        public async System.Threading.Tasks.Task<UserDto> UserMeGetAsync(bool? withAvatar = default, System.Threading.CancellationToken cancellationToken = default)
        {
            PotatoVN.Client.Client.ApiResponse<UserDto> localVarResponse = await UserMeGetWithHttpInfoAsync(withAvatar, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 获取自己的用户信息 
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="withAvatar"> (optional, default to true)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        public async System.Threading.Tasks.Task<PotatoVN.Client.Client.ApiResponse<UserDto>> UserMeGetWithHttpInfoAsync(bool? withAvatar = default, System.Threading.CancellationToken cancellationToken = default)
        {

            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (withAvatar != null)
            {
                localVarRequestOptions.QueryParameters.Add(PotatoVN.Client.Client.ClientUtils.ParameterToMultiMap("", "withAvatar", withAvatar));
            }

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserDto>("/user/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserMeGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 修改用户信息 所有字段均可选
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userModifyDto"> (optional)</param>
        /// <returns>UserDto</returns>
        public UserDto UserMePatch(UserModifyDto? userModifyDto = default)
        {
            PotatoVN.Client.Client.ApiResponse<UserDto> localVarResponse = UserMePatchWithHttpInfo(userModifyDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 修改用户信息 所有字段均可选
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userModifyDto"> (optional)</param>
        /// <returns>ApiResponse of UserDto</returns>
        public PotatoVN.Client.Client.ApiResponse<UserDto> UserMePatchWithHttpInfo(UserModifyDto? userModifyDto = default)
        {
            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = userModifyDto;

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Patch<UserDto>("/user/me", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserMePatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 修改用户信息 所有字段均可选
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userModifyDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserDto</returns>
        public async System.Threading.Tasks.Task<UserDto> UserMePatchAsync(UserModifyDto? userModifyDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            PotatoVN.Client.Client.ApiResponse<UserDto> localVarResponse = await UserMePatchWithHttpInfoAsync(userModifyDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 修改用户信息 所有字段均可选
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userModifyDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserDto)</returns>
        public async System.Threading.Tasks.Task<PotatoVN.Client.Client.ApiResponse<UserDto>> UserMePatchWithHttpInfoAsync(UserModifyDto? userModifyDto = default, System.Threading.CancellationToken cancellationToken = default)
        {

            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = userModifyDto;

            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PatchAsync<UserDto>("/user/me", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserMePatch", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 注册账户 若注册成功则返回用户信息与token
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRegisterDto"> (optional)</param>
        /// <returns>UserWithTokenDto</returns>
        public UserWithTokenDto UserPost(UserRegisterDto? userRegisterDto = default)
        {
            PotatoVN.Client.Client.ApiResponse<UserWithTokenDto> localVarResponse = UserPostWithHttpInfo(userRegisterDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 注册账户 若注册成功则返回用户信息与token
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRegisterDto"> (optional)</param>
        /// <returns>ApiResponse of UserWithTokenDto</returns>
        public PotatoVN.Client.Client.ApiResponse<UserWithTokenDto> UserPostWithHttpInfo(UserRegisterDto? userRegisterDto = default)
        {
            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = userRegisterDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UserWithTokenDto>("/user", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 注册账户 若注册成功则返回用户信息与token
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRegisterDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWithTokenDto</returns>
        public async System.Threading.Tasks.Task<UserWithTokenDto> UserPostAsync(UserRegisterDto? userRegisterDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            PotatoVN.Client.Client.ApiResponse<UserWithTokenDto> localVarResponse = await UserPostWithHttpInfoAsync(userRegisterDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 注册账户 若注册成功则返回用户信息与token
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userRegisterDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWithTokenDto)</returns>
        public async System.Threading.Tasks.Task<PotatoVN.Client.Client.ApiResponse<UserWithTokenDto>> UserPostWithHttpInfoAsync(UserRegisterDto? userRegisterDto = default, System.Threading.CancellationToken cancellationToken = default)
        {

            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = userRegisterDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserWithTokenDto>("/user", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 使用bgm账户登录/注册 如果该bgm账户没有potatoVN账号，则自动注册一个
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLoginViaBgmDto"> (optional)</param>
        /// <returns>UserWithTokenDto</returns>
        public UserWithTokenDto UserSessionBgmPost(UserLoginViaBgmDto? userLoginViaBgmDto = default)
        {
            PotatoVN.Client.Client.ApiResponse<UserWithTokenDto> localVarResponse = UserSessionBgmPostWithHttpInfo(userLoginViaBgmDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 使用bgm账户登录/注册 如果该bgm账户没有potatoVN账号，则自动注册一个
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLoginViaBgmDto"> (optional)</param>
        /// <returns>ApiResponse of UserWithTokenDto</returns>
        public PotatoVN.Client.Client.ApiResponse<UserWithTokenDto> UserSessionBgmPostWithHttpInfo(UserLoginViaBgmDto? userLoginViaBgmDto = default)
        {
            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = userLoginViaBgmDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UserWithTokenDto>("/user/session/bgm", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSessionBgmPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 使用bgm账户登录/注册 如果该bgm账户没有potatoVN账号，则自动注册一个
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLoginViaBgmDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWithTokenDto</returns>
        public async System.Threading.Tasks.Task<UserWithTokenDto> UserSessionBgmPostAsync(UserLoginViaBgmDto? userLoginViaBgmDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            PotatoVN.Client.Client.ApiResponse<UserWithTokenDto> localVarResponse = await UserSessionBgmPostWithHttpInfoAsync(userLoginViaBgmDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 使用bgm账户登录/注册 如果该bgm账户没有potatoVN账号，则自动注册一个
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLoginViaBgmDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWithTokenDto)</returns>
        public async System.Threading.Tasks.Task<PotatoVN.Client.Client.ApiResponse<UserWithTokenDto>> UserSessionBgmPostWithHttpInfoAsync(UserLoginViaBgmDto? userLoginViaBgmDto = default, System.Threading.CancellationToken cancellationToken = default)
        {

            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = userLoginViaBgmDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserWithTokenDto>("/user/session/bgm", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSessionBgmPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 登录账户 若登录成功则返回jwtToken
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLoginDto"> (optional)</param>
        /// <returns>UserWithTokenDto</returns>
        public UserWithTokenDto UserSessionPost(UserLoginDto? userLoginDto = default)
        {
            PotatoVN.Client.Client.ApiResponse<UserWithTokenDto> localVarResponse = UserSessionPostWithHttpInfo(userLoginDto);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 登录账户 若登录成功则返回jwtToken
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLoginDto"> (optional)</param>
        /// <returns>ApiResponse of UserWithTokenDto</returns>
        public PotatoVN.Client.Client.ApiResponse<UserWithTokenDto> UserSessionPostWithHttpInfo(UserLoginDto? userLoginDto = default)
        {
            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json",
                "text/json",
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = userLoginDto;


            // make the HTTP request
            var localVarResponse = this.Client.Post<UserWithTokenDto>("/user/session", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSessionPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 登录账户 若登录成功则返回jwtToken
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLoginDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWithTokenDto</returns>
        public async System.Threading.Tasks.Task<UserWithTokenDto> UserSessionPostAsync(UserLoginDto? userLoginDto = default, System.Threading.CancellationToken cancellationToken = default)
        {
            PotatoVN.Client.Client.ApiResponse<UserWithTokenDto> localVarResponse = await UserSessionPostWithHttpInfoAsync(userLoginDto, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 登录账户 若登录成功则返回jwtToken
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="userLoginDto"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWithTokenDto)</returns>
        public async System.Threading.Tasks.Task<PotatoVN.Client.Client.ApiResponse<UserWithTokenDto>> UserSessionPostWithHttpInfoAsync(UserLoginDto? userLoginDto = default, System.Threading.CancellationToken cancellationToken = default)
        {

            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json", 
                "text/json", 
                "application/*+json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.Data = userLoginDto;


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.PostAsync<UserWithTokenDto>("/user/session", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSessionPost", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取一个新jwt token 获取一个当前用户的新token
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>UserWithTokenDto</returns>
        public UserWithTokenDto UserSessionRefreshGet()
        {
            PotatoVN.Client.Client.ApiResponse<UserWithTokenDto> localVarResponse = UserSessionRefreshGetWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// 获取一个新jwt token 获取一个当前用户的新token
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of UserWithTokenDto</returns>
        public PotatoVN.Client.Client.ApiResponse<UserWithTokenDto> UserSessionRefreshGetWithHttpInfo()
        {
            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };

            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<UserWithTokenDto>("/user/session/refresh", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSessionRefreshGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// 获取一个新jwt token 获取一个当前用户的新token
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of UserWithTokenDto</returns>
        public async System.Threading.Tasks.Task<UserWithTokenDto> UserSessionRefreshGetAsync(System.Threading.CancellationToken cancellationToken = default)
        {
            PotatoVN.Client.Client.ApiResponse<UserWithTokenDto> localVarResponse = await UserSessionRefreshGetWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// 获取一个新jwt token 获取一个当前用户的新token
        /// </summary>
        /// <exception cref="PotatoVN.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (UserWithTokenDto)</returns>
        public async System.Threading.Tasks.Task<PotatoVN.Client.Client.ApiResponse<UserWithTokenDto>> UserSessionRefreshGetWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default)
        {

            PotatoVN.Client.Client.RequestOptions localVarRequestOptions = new PotatoVN.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json"
            };


            var localVarContentType = PotatoVN.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = PotatoVN.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


            // authentication (oauth2) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<UserWithTokenDto>("/user/session/refresh", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("UserSessionRefreshGet", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
