/*
 * PotatoVN.Server
 *
 * PotatoVN 同步服务器 最新更新：galgame新增playcount字段
 *
 * The version of the OpenAPI document: v1.4
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = PotatoVN.Client.Client.FileParameter;
using OpenAPIDateConverter = PotatoVN.Client.Client.OpenAPIDateConverter;

namespace PotatoVN.Client.Model
{
    /// <summary>
    /// CharacterDto
    /// </summary>
    [DataContract(Name = "CharacterDto")]
    public partial class CharacterDto : IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [DataMember(Name = "gender", EmitDefaultValue = false)]
        public Gender? Gender { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CharacterDto" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="relation">relation.</param>
        /// <param name="summary">summary.</param>
        /// <param name="gender">gender.</param>
        /// <param name="birthYear">birthYear.</param>
        /// <param name="birthMonth">birthMonth.</param>
        /// <param name="birthDay">birthDay.</param>
        /// <param name="bloodType">bloodType.</param>
        /// <param name="height">height.</param>
        /// <param name="weight">weight.</param>
        /// <param name="threeSize">threeSize.</param>
        /// <param name="imageUrl">imageUrl.</param>
        /// <param name="previewImageUrl">previewImageUrl.</param>
        public CharacterDto(int id = default, string name = default, string relation = default, string summary = default, Gender? gender = default, int birthYear = default, int birthMonth = default, int birthDay = default, string bloodType = default, string height = default, string weight = default, string threeSize = default, string imageUrl = default, string previewImageUrl = default)
        {
            this.Id = id;
            this.Name = name;
            this.Relation = relation;
            this.Summary = summary;
            this.Gender = gender;
            this.BirthYear = birthYear;
            this.BirthMonth = birthMonth;
            this.BirthDay = birthDay;
            this.BloodType = bloodType;
            this.Height = height;
            this.Weight = weight;
            this.ThreeSize = threeSize;
            this.ImageUrl = imageUrl;
            this.PreviewImageUrl = previewImageUrl;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Relation
        /// </summary>
        [DataMember(Name = "relation", EmitDefaultValue = true)]
        public string Relation { get; set; }

        /// <summary>
        /// Gets or Sets Summary
        /// </summary>
        [DataMember(Name = "summary", EmitDefaultValue = true)]
        public string Summary { get; set; }

        /// <summary>
        /// Gets or Sets BirthYear
        /// </summary>
        [DataMember(Name = "birthYear", EmitDefaultValue = false)]
        public int BirthYear { get; set; }

        /// <summary>
        /// Gets or Sets BirthMonth
        /// </summary>
        [DataMember(Name = "birthMonth", EmitDefaultValue = false)]
        public int BirthMonth { get; set; }

        /// <summary>
        /// Gets or Sets BirthDay
        /// </summary>
        [DataMember(Name = "birthDay", EmitDefaultValue = false)]
        public int BirthDay { get; set; }

        /// <summary>
        /// Gets or Sets BloodType
        /// </summary>
        [DataMember(Name = "bloodType", EmitDefaultValue = true)]
        public string BloodType { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name = "height", EmitDefaultValue = true)]
        public string Height { get; set; }

        /// <summary>
        /// Gets or Sets Weight
        /// </summary>
        [DataMember(Name = "weight", EmitDefaultValue = true)]
        public string Weight { get; set; }

        /// <summary>
        /// Gets or Sets ThreeSize
        /// </summary>
        [DataMember(Name = "threeSize", EmitDefaultValue = true)]
        public string ThreeSize { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        [DataMember(Name = "imageUrl", EmitDefaultValue = true)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets PreviewImageUrl
        /// </summary>
        [DataMember(Name = "previewImageUrl", EmitDefaultValue = true)]
        public string PreviewImageUrl { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CharacterDto {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Relation: ").Append(Relation).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  BirthYear: ").Append(BirthYear).Append("\n");
            sb.Append("  BirthMonth: ").Append(BirthMonth).Append("\n");
            sb.Append("  BirthDay: ").Append(BirthDay).Append("\n");
            sb.Append("  BloodType: ").Append(BloodType).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Weight: ").Append(Weight).Append("\n");
            sb.Append("  ThreeSize: ").Append(ThreeSize).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  PreviewImageUrl: ").Append(PreviewImageUrl).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Name (string) maxLength
            if (this.Name != null && this.Name.Length > 200)
            {
                yield return new ValidationResult("Invalid value for Name, length must be less than 200.", new [] { "Name" });
            }

            // Relation (string) maxLength
            if (this.Relation != null && this.Relation.Length > 200)
            {
                yield return new ValidationResult("Invalid value for Relation, length must be less than 200.", new [] { "Relation" });
            }

            // Summary (string) maxLength
            if (this.Summary != null && this.Summary.Length > 10000)
            {
                yield return new ValidationResult("Invalid value for Summary, length must be less than 10000.", new [] { "Summary" });
            }

            // BloodType (string) maxLength
            if (this.BloodType != null && this.BloodType.Length > 50)
            {
                yield return new ValidationResult("Invalid value for BloodType, length must be less than 50.", new [] { "BloodType" });
            }

            // Height (string) maxLength
            if (this.Height != null && this.Height.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Height, length must be less than 50.", new [] { "Height" });
            }

            // Weight (string) maxLength
            if (this.Weight != null && this.Weight.Length > 50)
            {
                yield return new ValidationResult("Invalid value for Weight, length must be less than 50.", new [] { "Weight" });
            }

            // ThreeSize (string) maxLength
            if (this.ThreeSize != null && this.ThreeSize.Length > 50)
            {
                yield return new ValidationResult("Invalid value for ThreeSize, length must be less than 50.", new [] { "ThreeSize" });
            }

            yield break;
        }
    }

}
